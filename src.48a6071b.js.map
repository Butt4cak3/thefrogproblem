{"version":3,"sources":["index.js"],"names":["main","Worker","alert","btnRun","document","getElementById","inputNumberOfGames","inputMinNumberOfPads","inputMaxNumberOfPads","inputNumberOfThreads","output","addDataRow","row","value","numberOfPads","averageJumps","addEventListener","numberOfGames","minNumberOfPads","maxNumberOfPads","numberOfThreads","numberOfGamesPerThread","Math","round","workers","thread","push","promises","Promise","resolve","worker","onmessage","e","data","postMessage","results","jumps","all","reduce","sum","result"],"mappings":";AAAA,SAASA,IACH,IAACC,OAIH,YAHAC,MACE,6FAKEC,MAAAA,EAASC,SAASC,eAAe,OACjCC,EAAqBF,SAASC,eAAe,iBAC7CE,EAAuBH,SAASC,eAAe,mBAC/CG,EAAuBJ,SAASC,eAAe,mBAC/CI,EAAuBL,SAASC,eAAe,mBAC/CK,EAASN,SAASC,eAAe,UAMjCM,EAAaC,IACjBF,EAAOG,UAAYD,EAAIE,gBAAgBF,EAAIG,kBAG7CZ,EAAOa,iBAAiB,QAAS,UACzBC,MAAAA,EAAgBX,EAAmBO,MACnCK,EAAkBX,EAAqBM,MACvCM,EAAkBX,EAAqBK,MACvCO,EAAkBX,EAAqBI,MACvCQ,EAAyBC,KAAKC,MAAMN,EAAgBG,GAZ1DV,EAAOG,MAAQ,GAgBTW,MAAAA,EAAU,GACX,IAAA,IAAIC,EAAS,EAAGA,EAASL,EAAiBK,IAC7CD,EAAQE,KAAK,IAAIzB,OAAO,yCAIxB,IAAA,IAAIa,EAAeI,EACnBJ,GAAgBK,EAChBL,IACA,CACMa,MAAAA,EAAW,GAEZ,IAAA,IAAIF,EAAS,EAAGA,EAASL,EAAiBK,IAC7CE,EAASD,KACP,IAAIE,QAAQC,IACJC,MAAAA,EAASN,EAAQC,GAEvBK,EAAOC,UAAYC,CAAAA,IACjBH,EAAQG,EAAEC,QAGZH,EAAOI,YAAY,CACjBjB,cAAeI,EACfP,aAAAA,OAMFqB,MACAC,SADgBR,QAAQS,IAAIV,IACZW,OAAO,CAACC,EAAKC,IAAWD,EAAMC,EAAOJ,MAAO,GAElEzB,EAAW,CAAEG,aAAAA,EAAcC,aADNqB,GAAShB,EAAkBC,QAMtDjB,SAASY,iBAAiB,mBAAoBhB","file":"src.48a6071b.js","sourceRoot":"..\\src","sourcesContent":["function main() {\r\n  if (!Worker) {\r\n    alert(\r\n      \"Sorry, but your browser does not support web workers, which are required by this website.\"\r\n    );\r\n    return;\r\n  }\r\n\r\n  const btnRun = document.getElementById(\"run\");\r\n  const inputNumberOfGames = document.getElementById(\"numberOfGames\");\r\n  const inputMinNumberOfPads = document.getElementById(\"minNumberOfPads\");\r\n  const inputMaxNumberOfPads = document.getElementById(\"maxNumberOfPads\");\r\n  const inputNumberOfThreads = document.getElementById(\"numberOfThreads\");\r\n  const output = document.getElementById(\"output\");\r\n\r\n  const clearOutput = () => {\r\n    output.value = \"\";\r\n  };\r\n\r\n  const addDataRow = row => {\r\n    output.value += `${row.numberOfPads},${row.averageJumps}\\n`;\r\n  };\r\n\r\n  btnRun.addEventListener(\"click\", async () => {\r\n    const numberOfGames = inputNumberOfGames.value;\r\n    const minNumberOfPads = inputMinNumberOfPads.value;\r\n    const maxNumberOfPads = inputMaxNumberOfPads.value;\r\n    const numberOfThreads = inputNumberOfThreads.value;\r\n    const numberOfGamesPerThread = Math.round(numberOfGames / numberOfThreads);\r\n\r\n    clearOutput();\r\n\r\n    const workers = [];\r\n    for (let thread = 0; thread < numberOfThreads; thread++) {\r\n      workers.push(new Worker(\"worker.js\"));\r\n    }\r\n\r\n    for (\r\n      let numberOfPads = minNumberOfPads;\r\n      numberOfPads <= maxNumberOfPads;\r\n      numberOfPads++\r\n    ) {\r\n      const promises = [];\r\n\r\n      for (let thread = 0; thread < numberOfThreads; thread++) {\r\n        promises.push(\r\n          new Promise(resolve => {\r\n            const worker = workers[thread];\r\n\r\n            worker.onmessage = e => {\r\n              resolve(e.data);\r\n            };\r\n\r\n            worker.postMessage({\r\n              numberOfGames: numberOfGamesPerThread,\r\n              numberOfPads\r\n            });\r\n          })\r\n        );\r\n      }\r\n\r\n      const results = await Promise.all(promises);\r\n      const jumps = results.reduce((sum, result) => sum + result.jumps, 0);\r\n      const averageJumps = jumps / (numberOfThreads * numberOfGamesPerThread);\r\n      addDataRow({ numberOfPads, averageJumps });\r\n    }\r\n  });\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", main);\r\n"]}